openapi: 3.0.0
info: 
  title: Swagger Tutorial
  version: 1.0.0
components:
  schemas: 
    UserWithId: 
      type: object
      required: 
        - id
      properties: 
        id: 
          type: number
          description: The user id
        first_name: 
          type: string
          description: The user first name
        last_name: 
          type: string
          description: The user last name
        email: 
          type: string
          description: The user email
        avatar: 
          type: string
          description: The user avatar
        role: 
          type: number
          description: The user role
      example: 
        id: 2
        email: janet.weaver@reqres.in
        first_name: Janet
        last_name: Weaver
        avatar: https://reqres.in/img/faces/2-image.jpg
        role: 1
    User: 
      type: object
      required: 
        - first_name
        - last_name
        - email
      properties: 
        first_name: 
          type: string
          description: The user first name
        last_name: 
          type: string
          description: The user last name
        email: 
          type: string
          description: The user email
        avatar: 
          type: string
          description: The user avatar
        role: 
          type: number
          description: The user role
      example: 
        email: janet.weaver@reqres.in
        first_name: Janet
        last_name: Weaver
        avatar: https://reqres.in/img/faces/2-image.jpg
        role: 1
    UserOnSoftMode: 
      type: object
      properties: 
        first_name: 
          type: string
          description: The user first name
        last_name: 
          type: string
          description: The user last name
        email: 
          type: string
          description: The user email
        avatar: 
          type: string
          description: The user avatar
        role: 
          type: number
          description: The user role
      example: 
        email: janet.weaver@reqres.in
        first_name: Janet
        last_name: Weaver
        avatar: https://reqres.in/img/faces/2-image.jpg
        role: 1
  responses: 
    notFoundError:
      description: Not found error message
      content:
        application/json:
          schema: 
            type: object
            example: 
              message: Users not found with your criteria
    internalServerError:
      description: Internal server error
      content:
        text/plain:
          schema: 
            type: string
            example: Unexpected error
    badRequestError:
      description: Bad request error
      content:
        text/plain:
          schema: 
            type: string
            example: Bad request error
    users: 
      description: Get multiple users
      content: 
        application/json: 
          schema: 
            type: array
            items: 
              allOf: 
                - $ref: '#/components/schemas/UserWithId'
    user: 
      description: Get user
      content: 
        application/json: 
          schema: 
            type: object
            $ref: '#/components/schemas/UserWithId'
tags: 
  - name: Users
    description: Users API
paths: 
  /users: 
    get: 
      summary: Returns the list of all users
      tags:
        - Users
      parameters: 
        - in: query
          name: first_name
          description: The user first name we want to filter by
          schema: 
            type: string
        - in: query
          name: last_name
          description: The user last name we want to filter by
          schema: 
            type: string
        - in: query
          name: email
          description: The user email we want to filter by
          schema: 
            type: string
      responses: 
        200: 
          $ref: '#/components/responses/users'
        400:
          $ref: '#/components/responses/badRequestError'
        404:
          $ref: '#/components/responses/notFoundError'
        500:
          $ref: '#/components/responses/internalServerError'
    post: 
      summary: create a new user
      tags:
        - Users
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/User' 
      responses: 
        200: 
          $ref: '#/components/responses/user'
        400:
          $ref: '#/components/responses/badRequestError'
        500:
          $ref: '#/components/responses/internalServerError'
  /users/{id}:
    get: 
      summary: Returns a user by id
      tags:
        - Users
      parameters: 
        - in: path
          name: id
          required: true
          description: A user id 
          schema: 
            type: string
      responses: 
        200: 
          $ref: '#/components/responses/user'
        400:
          $ref: '#/components/responses/badRequestError'
        404:
          $ref: '#/components/responses/notFoundError'
        500:
          $ref: '#/components/responses/internalServerError'
    put:
      summary: Put user by id
      tags: 
        - Users
      parameters:
        - in: path
          name: id
          required: true
          description: The user id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/UserOnSoftMode'
      responses: 
        200: 
          $ref: '#/components/responses/user'
        400:
          $ref: '#/components/responses/badRequestError'
        404:
          $ref: '#/components/responses/notFoundError'
        500:
          $ref: '#/components/responses/internalServerError'
    patch:
      summary: Patch user by id
      tags: 
        - Users
      parameters:
        - in: path
          name: id
          required: true
          description: The user id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/UserOnSoftMode'
      responses: 
        200: 
          $ref: '#/components/responses/user'
        400:
          $ref: '#/components/responses/badRequestError'
        404:
          $ref: '#/components/responses/notFoundError'
        500:
          $ref: '#/components/responses/internalServerError'
    delete:
      summary: Delete user by id
      tags: 
        - Users
      parameters:
        - in: path
          name: id
          required: true
          description: The user id
          schema:
            type: string
      responses: 
        200: 
          $ref: '#/components/responses/users'
        400:
          $ref: '#/components/responses/badRequestError'
        404:
          $ref: '#/components/responses/notFoundError'
        500:
          $ref: '#/components/responses/internalServerError'